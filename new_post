#!/usr/bin/env perl
use v5.36;
use open ':std', ':encoding(UTF-8)';
use Sq -sig => 1;
use Getopt::Long::Descriptive;
use Path::Tiny;
use Time::localtime;

# TODO: Correct handling with folders (when folders don't exists?)

my ($opt, $usage) = describe_options(
    'Usage: %c %o',
    ['title|t=s', 'title of file to create', {required     => 1 }],
    ['tags=s',    'comma separated tags',    {default      => ""}],
    ['help|h',    'Print this message',      {shortcircuit => 1 }],
);
$usage->die if $opt->help;

# generate the filename (including path) that should be created
my ($file, $slug) = assign {
    my $time  = localtime();
    my $date  = sprintf "%04d-%02d-%02d",
        ($time->year + 1900),
        ($time->mon + 1),
        $time->mday;
    my $title = Str->trim($opt->title);
    $title = lc $title;          # title always lower-case
    $title =~ s/[^a-z0-9\s]+//g; # remove anything not whitespace and alphanumeric
    $title =~ s/\s+/-/g;         # replace whitespaces with -
    my $name = sprintf "%s-%s.md", $date, $title;

    path(content => posts => $name), $title;
};

# Abort when destination file exists
die(sprintf("Error: file '%s' already exists. Use another title to fix.\n", $file))
    if $file->exists;

# write template output to file
Sq->fs->write_text($file, template({
    title => $opt->title,
    slug  => $slug,
    tags  => [split /,/, $opt->tags],
}));
printf "Created: '%s'\n", $file;


# Function to generate template output
sub template($arg) {
    state $input = type [hash =>
        [keys =>
            title => ['str'],
            slug  => ['str'],
        ],
        [okeys =>
            date => [match => qr/\d\d\d\d-\d\d-\d\d T \d\d:\d\d:\d\d/x],
            tags => [array => [of => ['str']]],
        ],
    ];
    Sq::Type::t_assert($input, $arg);
    # Add blessings
    sq($arg);

    my $date = assign {
        return $arg->{date} if defined $arg->{date};
        my $time = localtime();
        my $date = sprintf("%04d-%02d-%02dT00:00:00",
            ($time->year + 1900),
            ($time->mon + 1),
            $time->mday
        );
        return $date;
    };
    return [
        '---',
        'layout:  post',
        'title:   "' . Str->escape_html($arg->{title}) . '"',
        'slug:    ' . $arg->{slug},
        'date:    ' . $date,
        'lastmod: ' . $date,
        'tags:    [' . $arg->{tags}->join(",") . ']',
        'description:',
        '---',
    ];
}
